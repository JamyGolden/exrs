name: Rust

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  ubuntu:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose


  macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  # github actions does not support big endian systems directly, but it does support QEMU
  # see https://github.com/wasm3/wasm3/blob/main/.github/workflows/tests.yml#L318
  sparc64:
    runs-on: ubuntu-20.04
    name: cross-qemu-sparc64
    timeout-minutes: 25

    steps:
      - uses: actions/checkout@v2
      - name: Install QEMU
        run: |
          sudo apt update
          sudo apt install qemu-user-static
      - name: Install gcc-8-multilib-sparc64-linux-gnu and Sparc64 Rust toolchain
        run: |
          sudo apt install gcc-8-multilib-sparc64-linux-gnu
          rustup target add sparc64-unknown-linux-gnu
      - name: Cross-Compile project to Sparc64
        # see https://gist.github.com/tatsuya6502/cb584d073dbe792e2a1aa31ee49d3a25
        run: |
          RUSTFLAGS="-C linker=gcc-8-multilib-sparc64-linux-gnu"
          cargo build --target=sparc64-unknown-linux-gnu --verbose
      - name: Cross-Compile Test Executables to Sparc64
        run: |
          RUSTFLAGS="-C linker=gcc-8-multilib-sparc64-linux-gnu"
          cargo test --target=sparc64-unknown-linux-gnu --no-run --verbose
      - name: Qemu Run Tests
        # qemu-sparc64-static ./target/debug/deps/exr-2f623f7e2888e8f5
        # for each of the test binaries, run them in qemu (see https://askubuntu.com/questions/315335/bash-command-for-each-file-in-a-folder)
        run: |
          find ./target/debug/deps -iname 'exr-*' -exec qemu-sparc64-static

# github actions does not support big endian systems directly, but it does support QEMU
  # see https://github.com/wasm3/wasm3/blob/main/.github/workflows/tests.yml#L318
#  big-endian-systems:
#    runs-on: ubuntu-20.04
#    name: cross-qemu-${{ matrix.config.target }}
#    timeout-minutes: 25
#
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#          #- {target: i386,    toolchain: gcc-multilib,              cc: clang -m32,                 qemu: qemu-i386-static    }
#          - { target: arm,     toolchain: gcc-arm-linux-gnueabi,     cc: arm-linux-gnueabi-gcc,      qemu: qemu-arm-static }
#          - { target: armhf,   toolchain: gcc-arm-linux-gnueabihf,   cc: arm-linux-gnueabihf-gcc,    qemu: qemu-arm-static }
#          - { target: aarch64, toolchain: gcc-aarch64-linux-gnu,     cc: aarch64-linux-gnu-gcc,      qemu: qemu-aarch64-static }
#          - { target: riscv64, toolchain: gcc-riscv64-linux-gnu,     cc: riscv64-linux-gnu-gcc,      qemu: qemu-riscv64-static }
#          - { target: ppc,     toolchain: gcc-powerpc-linux-gnu,     cc: powerpc-linux-gnu-gcc,      qemu: qemu-ppc-static }
#          - { target: ppc64,   toolchain: gcc-powerpc64-linux-gnu,   cc: powerpc64-linux-gnu-gcc,    qemu: qemu-ppc64-static }
#          #- {target: ppc64le, toolchain: gcc-powerpc64le-linux-gnu, cc: powerpc64le-linux-gnu-gcc,  qemu: qemu-ppc64le-static }
#          - { target: s390x,   toolchain: gcc-s390x-linux-gnu,       cc: s390x-linux-gnu-gcc,        qemu: qemu-s390x-static }
#          - { target: mips,    toolchain: gcc-mips-linux-gnu,          cc: mips-linux-gnu-gcc,         qemu: qemu-mips-static }
#          - { target: mips64,  toolchain: gcc-mips64-linux-gnuabi64,   cc: mips64-linux-gnuabi64-gcc,  qemu: qemu-mips64-static }
#          - { target: mipsel,  toolchain: gcc-mipsel-linux-gnu,        cc: mipsel-linux-gnu-gcc,       qemu: qemu-mipsel-static }
#          - { target: mips64el,toolchain: gcc-mips64el-linux-gnuabi64, cc: mips64el-linux-gnuabi64-gcc,qemu: qemu-mips64el-static }
#          - { target: alpha,   toolchain: gcc-alpha-linux-gnu,       cc: alpha-linux-gnu-gcc,        qemu: qemu-alpha-static }
#          - { target: sparc64, toolchain: gcc-sparc64-linux-gnu,     cc: sparc64-linux-gnu-gcc,      qemu: qemu-sparc64-static, skip_wasi: true }
#
#          #- {target: i386 (u64 slots),    toolchain: gcc-multilib,              cc: clang -m32,                 qemu: qemu-i386-static,     cflags: -Dd_m3Use32BitSlots=0  }
#          - { target: arm (u64 slots),     toolchain: gcc-arm-linux-gnueabi,     cc: arm-linux-gnueabi-gcc,      qemu: qemu-arm-static,      cflags: -Dd_m3Use32BitSlots=0 }
#          - { target: aarch64 (u64 slots), toolchain: gcc-aarch64-linux-gnu,     cc: aarch64-linux-gnu-gcc,      qemu: qemu-aarch64-static,  cflags: -Dd_m3Use32BitSlots=0 }
#          - { target: ppc (u64 slots),     toolchain: gcc-powerpc-linux-gnu,     cc: powerpc-linux-gnu-gcc,      qemu: qemu-ppc-static,      cflags: -Dd_m3Use32BitSlots=0 }
#          - { target: ppc64 (u64 slots),   toolchain: gcc-powerpc64-linux-gnu,   cc: powerpc64-linux-gnu-gcc,    qemu: qemu-ppc64-static,    cflags: -Dd_m3Use32BitSlots=0 }
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install QEMU
#        run: |
#          sudo apt update
#          sudo apt install qemu-user-static
#      - name: Install ${{ matrix.config.toolchain }}
#        run: |
#          sudo apt install ${{ matrix.config.toolchain }}
#      - name: Build
#        run: |
#          mkdir build
#          cd build
#          ${{ matrix.config.cc }} -DASSERTS -Dd_m3HasWASI ${{ matrix.config.cflags }} \
#              -I../source ../source/*.c ../platforms/app/main.c \
#              -O3 -g0 -flto -lm -static \
#              -o wasm3
#      - name: Test WebAssembly spec
#        run: |
#          cd test
#          python3 run-spec-test.py --exec "${{ matrix.config.qemu }} ../build/wasm3 --repl"
#      - name: Test WASI apps
#        if: ${{ !matrix.config.skip_wasi }}
#        run: |
#          cd test
#          python3 run-wasi-test.py --fast --exec "${{ matrix.config.qemu }} ../build/wasm3"